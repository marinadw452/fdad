import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
import psycopg2
import psycopg2.extras
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove, BotCommand
from dataclasses import dataclass
from enum import Enum

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ================== ุฅุนุฏุงุฏุงุช ุงูุจูุช ==================
try:
    from config import BOT_TOKEN, PG_DB, PG_USER, PG_PASSWORD, PG_HOST, PG_PORT, SHOP_WHATSAPP
except ImportError:
    logger.error("ูุฑุฌู ุฅูุดุงุก ููู config.py ูุน ุงูุฅุนุฏุงุฏุงุช ุงููุทููุจุฉ")
    exit(1)

# ================== ุจูุงูุงุช ุงูููุชุฌุงุช ุงููุญุฏุซุฉ ==================
MENU_DATA = {
    'basboosa': [
        {
            'id': 'basboosa_normal',
            'name': 'ุจุณุจูุณุฉ ุนุงุฏูุฉ',
            'description': 'ุจุณุจูุณุฉ ูุฐูุฐุฉ ุจุงูุทุนู ุงูุชูููุฏู ุงูุฃุตูู',
            'emoji': '๐ง',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 12, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 24, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_nutella',
            'name': 'ุจุณุจูุณุฉ ููุชููุง',
            'description': 'ุจุณุจูุณุฉ ูุญุดูุฉ ุจูุฑููุฉ ุงูููุชููุง ุงูุดููุฉ',
            'emoji': '๐ซ',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 15, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 28, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_chocolate_saudi',
            'name': 'ุจุณุจูุณุฉ ุดููููุงุชุฉ ุงูุณุนูุฏูุฉ',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงูุดููููุงุชุฉ ุงูุณุนูุฏูุฉ ุงููุงุฎุฑุฉ',
            'emoji': '๐ฉ',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 14, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 26, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_cheese',
            'name': 'ุจุณุจูุณุฉ ุฌุจูุฉ',
            'description': 'ุจุณุจูุณุฉ ุญููุฉ ูุน ุทุนู ุงูุฌุจูุฉ ุงููููุฒ',
            'emoji': '๐ง',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 13, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 25, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_kinder',
            'name': 'ุจุณุจูุณุฉ ููุฏุฑ',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงูููุฏุฑ ุงููุฐูุฐุฉ',
            'emoji': '๐',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 16, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 30, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_happiness',
            'name': 'ุจุณุจูุณุฉ ูููุฉ ุงูุณุนุงุฏุฉ',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุฎุงุตุฉ ุชุฌูุจ ุงูุณุนุงุฏุฉ',
            'emoji': '๐',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 14, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 27, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_oreo',
            'name': 'ุจุณุจูุณุฉ ุฃูุฑูู',
            'description': 'ุจุณุจูุณุฉ ูุญุดูุฉ ุจูุทุน ุงูุฃูุฑูู ุงูููุฑูุดุฉ',
            'emoji': '๐ค',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 18, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 35, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_kitkat',
            'name': 'ุจุณุจูุณุฉ ูุช ูุงุช',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงููุช ูุงุช ุงูููุฑูุด',
            'emoji': '๐ซ',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 18, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 35, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_lotus',
            'name': 'ุจุณุจูุณุฉ ููุชุณ',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงูููุชุณ ุงููุฑุงููู',
            'emoji': '๐ช',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 15, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 28, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_snickers',
            'name': 'ุจุณุจูุณุฉ ุณูููุฑุฒ',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงูุณูููุฑุฒ ุจุงูููู ุงูุณูุฏุงูู',
            'emoji': '๐ฅ',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 17, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 32, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_galaxy',
            'name': 'ุจุณุจูุณุฉ ุฌูุงูุณู',
            'description': 'ุจุณุจูุณุฉ ุจุทุนู ุดููููุงุชุฉ ุฌูุงูุณู ุงููุฑูููุฉ',
            'emoji': '๐',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 16, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 30, 'emoji': '๐ฝ๏ธ'},
            }
        },
        {
            'id': 'basboosa_cinnamon',
            'name': 'ุจุณุจูุณุฉ ุณูุงุจูู',
            'description': 'ุจุณุจูุณุฉ ุจูููุฉ ุงููุฑูุฉ ุงูุนุฑุจูุฉ ุงูุฃุตููุฉ',
            'emoji': '๐ฟ',
            'sizes': {
                'small': {'name': 'ุตุบูุฑ', 'price': 13, 'emoji': '๐ฅ'},
                'medium': {'name': 'ูุชูุณุท', 'price': 24, 'emoji': '๐ฝ๏ธ'},
            }
        }
    ],
    'drinks': [
        {
            'id': 'saudi_coffee_pot',
            'name': 'ูููุฉ ุณุนูุฏูุฉ ุฏูุฉ',
            'description': 'ูููุฉ ุนุฑุจูุฉ ุฃุตููุฉ ูู ุฏูุฉ ุชูููุฏูุฉ',
            'emoji': 'โ',
            'sizes': {
                'single': {'name': 'ุฏูุฉ ูุงุญุฏุฉ', 'price': 35, 'emoji': '๐ซ'}
            }
        },
        {
            'id': 'saudi_coffee_cup',
            'name': 'ููุจ ูููุฉ ุณุนูุฏู',
            'description': 'ููุจ ูููุฉ ุนุฑุจูุฉ ุชูููุฏูุฉ',
            'emoji': 'โ',
            'sizes': {
                'single': {'name': 'ููุจ ูุงุญุฏ', 'price': 5, 'emoji': '๐ฅ'}
            }
        },
        {
            'id': 'distribution_plate',
            'name': 'ุตุญู ุชูุฒูุนุงุช',
            'description': 'ุตุญู ููุณ ูู ุฃูุถู ุงูุญูููุงุช ููุถูุงูุฉ',
            'emoji': '๐ฝ๏ธ',
            'sizes': {
                'single': {'name': 'ุตุญู ูุงุญุฏ', 'price': 49, 'emoji': '๐ฝ๏ธ'}
            }
        },
        {
            'id': 'millet_cake',
            'name': 'ูููุฉ ุงูุฏุฎู',
            'description': 'ูููุฉ ุตุญูุฉ ูู ุงูุฏุฎู ุงูุทุจูุนู',
            'emoji': '๐ฐ',
            'sizes': {
                'single': {'name': 'ูุทุนุฉ ูุงุญุฏุฉ', 'price': 23, 'emoji': '๐ฐ'}
            }
        }
    ]
}

# ================== ููุงุณุงุช ุฅุฏุงุฑุฉ ุงูุจูุงูุงุช ==================
class DatabaseManager:
    """ูุฏูุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุชุทูุฑ"""
    
    def __init__(self):
        self.connection_params = {
            'dbname': PG_DB,
            'user': PG_USER,
            'password': PG_PASSWORD,
            'host': PG_HOST,
            'port': PG_PORT
        }
    
    @asynccontextmanager
    async def get_connection(self):
        """ุงูุญุตูู ุนูู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุน ุฅุฏุงุฑุฉ ุงูููุงุฑุฏ"""
        conn = None
        try:
            conn = psycopg2.connect(
                **self.connection_params,
                cursor_factory=psycopg2.extras.RealDictCursor
            )
            yield conn
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
            if conn:
                conn.rollback()
            raise
        finally:
            if conn:
                conn.close()
    
    async def init_database(self):
        """ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
        try:
            async with self.get_connection() as conn:
                cur = conn.cursor()
                
                # ุฅูุดุงุก ุฌุฏูู ุงูุทูุจุงุช ุงููุญุฏุซ
                cur.execute("""
                CREATE TABLE IF NOT EXISTS orders (
                    id SERIAL PRIMARY KEY,
                    order_uuid UUID DEFAULT gen_random_uuid(),
                    customer_id BIGINT NOT NULL,
                    customer_name TEXT NOT NULL,
                    customer_phone TEXT NOT NULL,
                    items JSONB NOT NULL,
                    total_amount INTEGER NOT NULL,
                    status VARCHAR(20) DEFAULT 'pending',
                    location_lat FLOAT,
                    location_lon FLOAT,
                    location_address TEXT,
                    delivery_notes TEXT,
                    estimated_time INTEGER DEFAULT 30,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                # ุฅูุดุงุก ุฌุฏูู ุชูููู ุงูุนููุงุก
                cur.execute("""
                CREATE TABLE IF NOT EXISTS customer_reviews (
                    id SERIAL PRIMARY KEY,
                    order_id INTEGER REFERENCES orders(id),
                    customer_id BIGINT NOT NULL,
                    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
                    comment TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                # ุฅูุดุงุก ุฌุฏูู ุงูุฅุญุตุงุฆูุงุช
                cur.execute("""
                CREATE TABLE IF NOT EXISTS bot_analytics (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    action VARCHAR(50) NOT NULL,
                    data JSONB,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """)
                
                # ุฅูุดุงุก ููุงุฑุณ ููุฃุฏุงุก
                cur.execute("CREATE INDEX IF NOT EXISTS idx_orders_status ON orders (status, created_at)")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_orders_customer ON orders (customer_id)")
                cur.execute("CREATE INDEX IF NOT EXISTS idx_analytics_action ON bot_analytics (action, timestamp)")
                
                conn.commit()
                logger.info("โ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ")
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
            raise
    
    async def create_order(self, customer_id: int, customer_name: str, customer_phone: str, 
                          items: List[Dict], total_amount: int, location_data: Dict = None) -> int:
        """ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ"""
        try:
            async with self.get_connection() as conn:
                cur = conn.cursor()
                
                cur.execute("""
                    INSERT INTO orders (customer_id, customer_name, customer_phone, items, 
                                      total_amount, location_lat, location_lon, location_address)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING id, order_uuid
                """, (
                    customer_id, customer_name, customer_phone, json.dumps(items), 
                    total_amount,
                    location_data.get('lat') if location_data else None,
                    location_data.get('lon') if location_data else None,
                    location_data.get('address') if location_data else None
                ))
                
                result = cur.fetchone()
                conn.commit()
                
                logger.info(f"ุชู ุฅูุดุงุก ุงูุทูุจ ุฑูู {result['id']} ููุนููู {customer_id}")
                return result['id']
                
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงูุทูุจ: {e}")
            raise
    
    async def log_analytics(self, user_id: int, action: str, data: Dict = None):
        """ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช"""
        try:
            async with self.get_connection() as conn:
                cur = conn.cursor()
                cur.execute("""
                    INSERT INTO bot_analytics (user_id, action, data)
                    VALUES (%s, %s, %s)
                """, (user_id, action, json.dumps(data) if data else None))
                conn.commit()
        except Exception as e:
            logger.error(f"ุฎุทุฃ ูู ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช: {e}")

# ================== ุญุงูุงุช ุงูุจูุช ==================
class OrderStates(StatesGroup):
    choosing_category = State()
    choosing_product = State()
    choosing_size = State()
    choosing_quantity = State()
    entering_contact = State()
    entering_location = State()
    adding_notes = State()
    confirming_order = State()

# ================== ูุฏูุฑ ุงูููุชุฌุงุช ==================
class ProductManager:
    """ูุฏูุฑ ุงูููุชุฌุงุช ุงููุชุทูุฑ"""
    
    @staticmethod
    def get_categories():
        """ุงูุญุตูู ุนูู ูุฆุงุช ุงูููุชุฌุงุช"""
        return {
            'basboosa': {'name': 'ุงูุจุณุจูุณุฉ', 'emoji': '๐ง', 'description': 'ุชุดูููุฉ ูุชููุนุฉ ูู ุงูุจุณุจูุณุฉ ุงูุดููุฉ'},
            'drinks': {'name': 'ุงููุดุฑูุจุงุช ูุงูุฅุถุงูุงุช', 'emoji': 'โ', 'description': 'ูููุฉ ุนุฑุจูุฉ ูุญูููุงุช ุฅุถุงููุฉ'}
        }
    
    @staticmethod
    def get_products_by_category(category: str):
        """ุงูุญุตูู ุนูู ุงูููุชุฌุงุช ุญุณุจ ุงููุฆุฉ"""
        return MENU_DATA.get(category, [])
    
    @staticmethod
    def get_product_by_id(product_id: str):
        """ุงูุจุญุซ ุนู ููุชุฌ ุจุงููุนุฑู"""
        for category_products in MENU_DATA.values():
            for product in category_products:
                if product['id'] == product_id:
                    return product
        return None

# ================== ูุฏูุฑ ุงูุณูุฉ ุงููุชุทูุฑ ==================
class CartManager:
    """ูุฏูุฑ ุงูุณูุฉ ุงููุชุทูุฑ"""
    
    @staticmethod
    async def add_item(state: FSMContext, product_id: str, size: str, quantity: int):
        """ุฅุถุงูุฉ ุนูุตุฑ ููุณูุฉ"""
        data = await state.get_data()
        cart = data.get('cart', [])
        
        product = ProductManager.get_product_by_id(product_id)
        if not product:
            return False
        
        size_info = product['sizes'].get(size)
        if not size_info:
            return False
        
        # ุงูุจุญุซ ุนู ุนูุตุฑ ูุดุงุจู ูู ุงูุณูุฉ
        existing_item = None
        for item in cart:
            if item['product_id'] == product_id and item['size'] == size:
                existing_item = item
                break
        
        if existing_item:
            existing_item['quantity'] += quantity
            existing_item['total_price'] = existing_item['quantity'] * existing_item['unit_price']
        else:
            cart.append({
                'product_id': product_id,
                'product_name': product['name'],
                'product_emoji': product['emoji'],
                'size': size,
                'size_name': size_info['name'],
                'size_emoji': size_info['emoji'],
                'quantity': quantity,
                'unit_price': size_info['price'],
                'total_price': quantity * size_info['price']
            })
        
        await state.update_data(cart=cart)
        return True
    
    @staticmethod
    async def get_cart_total(state: FSMContext):
        """ุญุณุงุจ ุฅุฌูุงูู ุงูุณูุฉ"""
        data = await state.get_data()
        cart = data.get('cart', [])
        return sum(item['total_price'] for item in cart)
    
    @staticmethod
    async def get_cart_items_count(state: FSMContext):
        """ุนุฏุฏ ุงูุนูุงุตุฑ ูู ุงูุณูุฉ"""
        data = await state.get_data()
        cart = data.get('cart', [])
        return sum(item['quantity'] for item in cart)
    
    @staticmethod
    async def clear_cart(state: FSMContext):
        """ูุณุญ ุงูุณูุฉ"""
        await state.update_data(cart=[])

# ================== ุฃุฒุฑุงุฑ ุงูุชุญูู ุงููุชุทูุฑุฉ ==================
class KeyboardManager:
    """ูุฏูุฑ ุงูุฃุฒุฑุงุฑ ุงููุชุทูุฑ"""
    
    @staticmethod
    def main_menu():
        """ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ ุงููุชุทูุฑุฉ"""
        builder = InlineKeyboardBuilder()
        
        categories = ProductManager.get_categories()
        for category_id, category_info in categories.items():
            builder.button(
                text=f"{category_info['emoji']} {category_info['name']}",
                callback_data=f"category:{category_id}"
            )
        
        builder.button(text="๐ ุงูุณูุฉ", callback_data="cart:view")
        builder.button(text="๐ ุทูุจุงุชู", callback_data="orders:my")
        builder.button(text="๐ ุชูุงุตู ูุนูุง", callback_data="contact:us")
        builder.button(text="โน๏ธ ุนู ุงููุญู", callback_data="about:shop")
        
        builder.adjust(1, 2, 2)
        return builder.as_markup()
    
    @staticmethod
    def category_products(category: str):
        """ุนุฑุถ ููุชุฌุงุช ุงููุฆุฉ"""
        builder = InlineKeyboardBuilder()
        products = ProductManager.get_products_by_category(category)
        
        for product in products:
            builder.button(
                text=f"{product['emoji']} {product['name']}",
                callback_data=f"product:{product['id']}"
            )
        
        builder.button(text="๐ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="main:menu")
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def product_sizes(product_id: str):
        """ุงุฎุชูุงุฑ ุฃุญุฌุงู ุงูููุชุฌ"""
        builder = InlineKeyboardBuilder()
        product = ProductManager.get_product_by_id(product_id)
        
        if not product:
            return None
        
        for size_id, size_info in product['sizes'].items():
            builder.button(
                text=f"{size_info['emoji']} {size_info['name']} - {size_info['price']} ุฑ.ุณ",
                callback_data=f"size:{product_id}:{size_id}"
            )
        
        builder.button(text="๐ ุฑุฌูุน", callback_data=f"category:{product_id.split('_')[0]}")
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def quantity_selector(product_id: str, size: str):
        """ุงุฎุชูุงุฑ ุงููููุฉ"""
        builder = InlineKeyboardBuilder()
        
        # ุฃุฒุฑุงุฑ ุงููููุฉ ุงูุณุฑูุนุฉ
        for qty in [1, 2, 3, 5, 10]:
            builder.button(
                text=f"{qty}",
                callback_data=f"quantity:{product_id}:{size}:{qty}"
            )
        
        builder.button(text="๐ ุฑุฌูุน", callback_data=f"product:{product_id}")
        builder.adjust(5, 1)
        return builder.as_markup()
    
    @staticmethod
    def cart_actions():
        """ุฃุฒุฑุงุฑ ุงูุณูุฉ"""
        builder = InlineKeyboardBuilder()
        builder.button(text="โ ุชุฃููุฏ ุงูุทูุจ", callback_data="order:confirm")
        builder.button(text="๐๏ธ ุฅูุฑุงุบ ุงูุณูุฉ", callback_data="cart:clear")
        builder.button(text="โ ุฅุถุงูุฉ ุงููุฒูุฏ", callback_data="main:menu")
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def location_input():
        """ุฅุฏุฎุงู ุงููููุน"""
        builder = ReplyKeyboardBuilder()
        builder.button(text="๐ ูุดุงุฑูุฉ ูููุนู", request_location=True)
        builder.button(text="โ๏ธ ูุชุงุจุฉ ุงูุนููุงู")
        builder.adjust(1)
        return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)

# ================== ุฅุนุฏุงุฏ ุงูุจูุช ุงููุชุทูุฑ ==================
db_manager = DatabaseManager()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ================== ูุนุงูุฌุงุช ุงูุฃุญุฏุงุซ ุงููุชุทูุฑุฉ ==================

@dp.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    """ูุนุงูุฌ ุงูุจุฏุงูุฉ ุงููุชุทูุฑ"""
    await state.clear()
    await state.set_data({'cart': []})
    
    # ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช
    await db_manager.log_analytics(message.from_user.id, 'start_command')
    
    welcome_text = f"""๐ ูุฑุญุจุงู ุจู ูู ูุญู ูุฎุงูุฉ ุจุณุจูุณุชู ๐

๐ ุฃููุงู {message.from_user.first_name}!

๐ช ูุญููุง ูุชุฎุตุต ูู ุชูุฏูู ุฃูุถู ุฃููุงุน ุงูุจุณุจูุณุฉ ุงูุทุงุฒุฌุฉ ูุงููููุฉ ุงูุนุฑุจูุฉ ุงูุฃุตููุฉ

๐ ุงููููุน: ุชุจููุ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ

โจ ุงุณุชูุชุน ุจุชุฌุฑุจุฉ ุทูุจ ุณููุฉ ููุฑูุญุฉ"""
    
    await message.answer(
        welcome_text, 
        reply_markup=KeyboardManager.main_menu()
    )

@dp.callback_query(F.data == "main:menu")
async def main_menu_handler(callback: types.CallbackQuery):
    """ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ"""
    await callback.message.edit_text(
        "๐ช ูุญู ูุฎุงูุฉ ุจุณุจูุณุชู\n\nุงุฎุชุฑ ูุง ุชุฑูุฏู ูู ุงููุงุฆูุฉ:",
        reply_markup=KeyboardManager.main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("category:"))
async def category_handler(callback: types.CallbackQuery):
    """ูุนุงูุฌ ูุฆุงุช ุงูููุชุฌุงุช"""
    category = callback.data.split(":")[1]
    
    # ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช
    await db_manager.log_analytics(
        callback.from_user.id, 
        'category_selected', 
        {'category': category}
    )
    
    categories = ProductManager.get_categories()
    category_info = categories.get(category)
    
    if not category_info:
        await callback.answer("โ ูุฆุฉ ุบูุฑ ููุฌูุฏุฉ", show_alert=True)
        return
    
    text = f"{category_info['emoji']} {category_info['name']}\n\n"
    text += f"๐ {category_info['description']}\n\n"
    text += "ุงุฎุชุฑ ุงูููุชุฌ ุงููุทููุจ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=KeyboardManager.category_products(category)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("product:"))
async def product_handler(callback: types.CallbackQuery):
    """ูุนุงูุฌ ุนุฑุถ ุงูููุชุฌ"""
    product_id = callback.data.split(":")[1]
    product = ProductManager.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("โ ุงูููุชุฌ ุบูุฑ ููุฌูุฏ", show_alert=True)
        return
    
    # ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช
    await db_manager.log_analytics(
        callback.from_user.id,
        'product_viewed',
        {'product_id': product_id}
    )
    
    text = f"{product['emoji']} {product['name']}\n\n"
    text += f"๐ {product['description']}\n\n"
    text += "๐ฏ ุงุฎุชุฑ ุงูุญุฌู ุงููุทููุจ:"
    
    keyboard = KeyboardManager.product_sizes(product_id)
    if keyboard:
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.answer("โ ูุง ุชูุฌุฏ ุฃุญุฌุงู ูุชุงุญุฉ", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("size:"))
async def size_handler(callback: types.CallbackQuery):
    """ูุนุงูุฌ ุงุฎุชูุงุฑ ุงูุญุฌู"""
    _, product_id, size = callback.data.split(":")
    
    product = ProductManager.get_product_by_id(product_id)
    if not product:
        await callback.answer("โ ุงูููุชุฌ ุบูุฑ ููุฌูุฏ", show_alert=True)
        return
    
    size_info = product['sizes'].get(size)
    if not size_info:
        await callback.answer("โ ุงูุญุฌู ุบูุฑ ูุชุงุญ", show_alert=True)
        return
    
    text = f"{product['emoji']} {product['name']}\n"
    text += f"{size_info['emoji']} ุงูุญุฌู: {size_info['name']}\n"
    text += f"๐ฐ ุงูุณุนุฑ: {size_info['price']} ุฑ.ุณ\n\n"
    text += "๐ข ุงุฎุชุฑ ุงููููุฉ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=KeyboardManager.quantity_selector(product_id, size)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("quantity:"))
async def quantity_handler(callback: types.CallbackQuery, state: FSMContext):
    """ูุนุงูุฌ ุงุฎุชูุงุฑ ุงููููุฉ"""
    _, product_id, size, quantity = callback.data.split(":")
    quantity = int(quantity)
    
    # ุฅุถุงูุฉ ููุณูุฉ
    success = await CartManager.add_item(state, product_id, size, quantity)
    
    if not success:
        await callback.answer("โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูููุชุฌ", show_alert=True)
        return
    
    product = ProductManager.get_product_by_id(product_id)
    size_info = product['sizes'][size]
    total_price = quantity * size_info['price']
    
    # ุชุณุฌูู ุงูุฅุญุตุงุฆูุงุช
    await db_manager.log_analytics(
        callback.from_user.id,
        'item_added_to_cart',
        {
            'product_id': product_id,
            'size': size,
            'quantity': quantity,
            'price': total_price
        }
    )
    
    cart_count = await CartManager.get_cart_items_count(state)
    
    text = f"โ ุชู ุฅุถุงูุฉ ุงูููุชุฌ ููุณูุฉ!\n\n
